fn resume_func<T, Results>(

        &mut self,

        mut ctx: StoreContextMut<T>,

        host_func: Func,

        params: impl CallParams,

        results: Results,

    ) -> Result<<Results as CallResults>::Results, TaggedTrap>

    where

        Results: CallResults,

    {

        self.stack

            .values

            .drop(host_func.ty(ctx.as_context()).params().len());

        self.stack.values.extend(params.call_params());

        assert!(

            self.stack.frames.peek().is_some(),

            "a frame must be on the call stack upon resumption"

        );

        self.execute_wasm_func(ctx.as_context_mut())?;

        let results = self.write_results_back(results);

        Ok(results)

    }