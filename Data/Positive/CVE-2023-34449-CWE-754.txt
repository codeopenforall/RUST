pub fn invoke_contract_delegate(&self) -> i32 {
    ///     let call_params = build_call::<DefaultEnvironment>()
    ///         .call_type(DelegateCall::new(
    ///             <DefaultEnvironment as ink::env::Environment>::Hash::CLEAR_HASH,
    ///         ))
    ///         .exec_input(
    ///             ExecutionInput::new(Selector::new([0xCA, 0xFE, 0xBA, 0xBE]))
    ///                 .push_arg(42u8)
    ///                 .push_arg(true)
    ///                 .push_arg(&[0x10u8; 32]),
    ///         )
    ///         .returns::<i32>()
    ///         .params();
    ///     self.env()
    ///         .invoke_contract_delegate(&call_params)
    ///         .unwrap_or_else(|err| {
    ///             panic!("call delegate invocation must succeed: {:?}", err)
    ///         })
    /// }



pub fn try_invoke(&self) -> Result<ink_primitives::MessageResult<R>, crate::Error> {
        crate::invoke_contract(self)
    }

