fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        for _ in 0..self.zeros() {
            write!(f, "0")?;
        }

        write!(f, "{}", self.value())
    }

fn parse() {
        let mut number = PhoneNumber {
            code: country::Code {
                value: 64,
                source: country::Source::Default,
            },

            national: NationalNumber::new(33316005, 0),

            extension: None,
            carrier: None,
        };

        number.code.source = country::Source::Default;
        assert_eq!(
            number,
            parser::parse(Some(country::NZ), "033316005").unwrap()
        );
        assert_eq!(
            number,
            parser::parse(Some(country::NZ), "33316005").unwrap()
        );
        assert_eq!(
            number,
            parser::parse(Some(country::NZ), "03-331 6005").unwrap()
        );
        assert_eq!(
            number,
            parser::parse(Some(country::NZ), "03 331 6005").unwrap()
        );

        number.code.source = country::Source::Plus;
        assert_eq!(
            number,
            parser::parse(Some(country::NZ), "tel:03-331-6005;phone-context=+64").unwrap()
        );
        // FIXME: What the fuck is this.
        // assert_eq!(number, parser::parse(Some(country::NZ), "tel:331-6005;phone-context=+64-3").unwrap());
        // assert_eq!(number, parser::parse(Some(country::NZ), "tel:331-6005;phone-context=+64-3").unwrap());
        assert_eq!(
            number,
            parser::parse(Some(country::NZ), "tel:03-331-6005;phone-context=+64;a=%A1").unwrap()
        );
        assert_eq!(
            number,
            parser::parse(
                Some(country::NZ),
                "tel:03-331-6005;isub=12345;phone-context=+64"
            )
            .unwrap()
        );
        assert_eq!(
            number,
            parser::parse(Some(country::NZ), "tel:+64-3-331-6005;isub=12345").unwrap()
        );
        assert_eq!(
            number,
            parser::parse(Some(country::NZ), "03-331-6005;phone-context=+64").unwrap()
        );

        number.code.source = country::Source::Idd;
        assert_eq!(
            number,
            parser::parse(Some(country::NZ), "0064 3 331 6005").unwrap()
        );
        assert_eq!(
            number,
            parser::parse(Some(country::US), "01164 3 331 6005").unwrap()
        );

        number.code.source = country::Source::Plus;
        assert_eq!(
            number,
            parser::parse(Some(country::US), "+64 3 331 6005").unwrap()
        );

        assert_eq!(
            number,
            parser::parse(Some(country::US), "+01164 3 331 6005").unwrap()
        );
        assert_eq!(
            number,
            parser::parse(Some(country::NZ), "+0064 3 331 6005").unwrap()
        );
        assert_eq!(
            number,
            parser::parse(Some(country::NZ), "+ 00 64 3 331 6005").unwrap()
        );

        let number = PhoneNumber {
            code: country::Code {
                value: 64,
                source: country::Source::Number,
            },

            national: NationalNumber::new(64123456, 0),

            extension: None,
            carrier: None,
        };

        assert_eq!(
            number,
            parser::parse(Some(country::NZ), "64(0)64123456").unwrap()
        );

        assert_eq!(
            PhoneNumber {
                code: country::Code {
                    value: 49,
                    source: country::Source::Default,
                },

                national: NationalNumber::new(30123456, 0),

                extension: None,
                carrier: None,
            },
            parser::parse(Some(country::DE), "301/23456").unwrap()
        );

        assert_eq!(
            PhoneNumber {
                code: country::Code {
                    value: 81,
                    source: country::Source::Plus,
                },

                national: NationalNumber::new(2345, 0,),

                extension: None,
                carrier: None,
            },
            parser::parse(Some(country::JP), "+81 *2345").unwrap()
        );

        assert_eq!(
            PhoneNumber {
                code: country::Code {
                    value: 64,
                    source: country::Source::Default,
                },

                national: NationalNumber::new(12, 0,),

                extension: None,
                carrier: None,
            },
            parser::parse(Some(country::NZ), "12").unwrap()
        );

        assert_eq!(
            PhoneNumber {
                code: country::Code {
                    value: 55,
                    source: country::Source::Default,
                },

                national: NationalNumber::new(3121286979, 0),

                extension: None,
                carrier: Some("12".into()),
            },
            parser::parse(Some(country::BR), "012 3121286979").unwrap()
        );
    }



pub fn value(&self) -> u64 {
        self.value & 0x00ffffffffffffff
    }

pub fn zeros(&self) -> u8 {
        (self.value >> 56) as u8
    }

