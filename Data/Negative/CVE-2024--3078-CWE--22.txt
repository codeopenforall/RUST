pub async fn get_full_snapshot_path(
    toc: &TableOfContent,
    snapshot_name: &str,
) -> Result<PathBuf, StorageError> {
    let snapshots_path = toc.snapshots_path();

    let absolute_snapshot_dir = Path::new(snapshots_path)
        .canonicalize()
        .map_err(|_| StorageError::not_found(format!("Snapshot directory: {snapshots_path}")))?;

    let absolute_snapshot_path = absolute_snapshot_dir
        .join(snapshot_name)
        .canonicalize()
        .map_err(|_| StorageError::not_found(format!("Snapshot {snapshot_name}")))?;

    if !absolute_snapshot_path.starts_with(absolute_snapshot_dir) {
        return Err(StorageError::not_found(format!("Snapshot {snapshot_name}")));
    }

    if !absolute_snapshot_path.exists() {
        return Err(StorageError::not_found(format!("Snapshot {snapshot_name}")));
    }

    Ok(absolute_snapshot_path)
}

pub async fn get_snapshot_path(&self, snapshot_name: &str) -> CollectionResult<PathBuf> {
        let absolute_snapshot_dir = self.snapshots_path.canonicalize().map_err(|_| {
            CollectionError::not_found(format!(
                "Snapshot directory: {}",
                self.snapshots_path.display()
            ))
        })?;

        let absolute_snapshot_path = absolute_snapshot_dir
            .join(snapshot_name)
            .canonicalize()
            .map_err(|_| CollectionError::not_found(format!("Snapshot {snapshot_name}")))?;

        if !absolute_snapshot_path.starts_with(absolute_snapshot_dir) {
            return Err(CollectionError::not_found(format!(
                "Snapshot {snapshot_name}"
            )));
        }

        if !absolute_snapshot_path.exists() {
            return Err(CollectionError::not_found(format!(
                "Snapshot {snapshot_name}"
            )));
        }

        Ok(absolute_snapshot_path)
    }

pub fn not_found(description: impl Into<String>) -> StorageError {
        StorageError::NotFound {
            description: description.into(),
        }
    }

